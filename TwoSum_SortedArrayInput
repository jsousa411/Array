/*
Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
*/

public class Solution {
    public int[] TwoSum(int[] numbers, int target) {
        
        int x;
        int SecondNumber;
        
        if(numbers.Length < 3)
            return new int[]{1,2};
        
        
        for(int i = 0; i < numbers.Length; i++)
        {
            SecondNumber = target - numbers[i];
            
            x = numbers.Length/2;
            
            if(numbers[x] <= SecondNumber)
                while(numbers[x] <= SecondNumber && x <= numbers.Length-1)
                {
                    if(numbers[x] == SecondNumber)
                        return new int[]{i+1,x+1};
                    x++;
                    if(x >= numbers.Length)
                        break;
                     
                }
            else
                while(numbers[x] >= SecondNumber && x > i)
                {
                    if(numbers[x] == SecondNumber)
                        return new int[]{i+1,x+1};
                    x--;
                    if(x<=i)
                        break;
                    
                }
        }
        
       return null;
        
    }
}
