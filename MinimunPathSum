
/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
*/

/*
  Run time complexity is O(iMax) + O(jMax) + O(iMax*jMax), which is equals to O(iMax*jMax);
  Extra space complexity is O(1) since we are using the existing matrix.  We dont' retain original data.
  If you want to retain original data try using a single row to calculate the values and this leads to O(Min(jMax,iMax)).
*/
public class Solution {
    public int MinPathSum(int[,] grid) {
        
        // matrix dimension
        int iMax = grid.GetLength(0) -1,
            jMax = grid.GetLength(1) -1;
        
        // populate first row
        for(int i = 1; i <= iMax; i++)
        {
            grid[i,0] += grid[i-1,0];
        }
        
        // populate first column
        for(int j = 1; j <= jMax; j++)
        {
            grid[0,j] += grid[0,j-1];
        }
        
        // traverse matrix starting at point 1,1
        // and calculate sums
        for(int i = 1; i <= iMax; i++ )
        {
            for(int j = 1; j <= jMax; j++)
            {                
               
                grid[i,j] += Math.Min(grid[i,j-1],grid[i-1,j]);
                
            }
        }
        
        // return min sum
        return grid[iMax,jMax];
    }
}
