/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/


/*
Approach:  calculate the SearchValue to search for 
by subtracting target - valueInArray
Iterate through array for SearchValue
This gives O(n*n) in the worse case
*/
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        
        int[] result = new int[2];
        int v1 = 0,
            v2 = 0;
        
        for(j = 0; j < nums.Length; j++)
        {
            v1 = nums[j];
            v2 = target - v1;
            
            for(i = 0; i < nums.Length; i++)
            {
                if(i == j)
                    continue;
                if(nums[i] == v2)
                {
                    result[0] = j;
                    result[1] = i;
                    //return result;
                    break;
                }
            }
        }
        
        
        return result;
        
    }
}
