/*
  Big O is O( numRows * lengthOfRow // for each iteration of while loop * for loop
              + numRows // for copying array to list
              // additional one access operators can be neglected)
  Overall run time operation is: O(numRows*lengthOfRow), which is O(numRows*numRows)
  
  Space complexity O( numRows // for each list row
                            + numRows*(numrows-1) // for each row calculated and previous row as reference)
  Overall space complexity O(numRows*numRows)                   
*/
public class Solution {
         /// <summary>
        /// Generate the kths rows of a pascal triangle
        /// </summary>
        /// <param name="numRows"></param>
        /// <returns></returns>
        public IList<IList<int>> Generate(int numRows) {
        
            if(numRows < 1)
                throw new Exception("\n Invalid input: numRows");
            int i = 0,
                x = 0,
                j = 0,
                rowCount = 1; // row # 1
            int[] Arr1 = new int[1],
                  PreviousRow = new int[1];

            IList<int> row = new List<int>();
            IList<IList<int>> result = new List<IList<int>>();

            // first row of triangle
           // Arr1 = new int[1];
            
            Arr1[0] = 1;
            row = Arr1.ToList();
            result.Add(row);
            
            if(numRows == 1)
                return result;
        
            // second row of triangle
            Arr1 = new int[2];
            Arr1[0] = 1;
            Arr1[1] = 1;
            row = Arr1.ToList();
            result.Add(row);
        
             if(numRows == 2)
                return result;

            i = 2;
            rowCount = i + 1;
            // second row of triangle
            Arr1 = new int[rowCount];
            PreviousRow = result[i - 1].ToArray();

            // loop Kth row times... so big O is O(numRows * lengthOfRow + numRows + lengthRow), which equals O(numRows*lengthOfRow)
            while (i < numRows)
            {
                Arr1[0] = 1;
                Arr1[rowCount - 1] = 1;

                // rowCount - 2 entails the first and last number
                // are already set above on Arr1[0] = 1 ....
                // Big O is, "length of row," - 2

                for (j = 0, x = 1; j < rowCount - 2; j++, x++)
                {
                    Arr1[x] = PreviousRow[j] + PreviousRow[j + 1];
                }

                // convert Arr1ay to list
                // Order of N operations
                row = Arr1.ToList();

                // store Arr1ay in list
                result.Add(row);

                // allocate new Arr1ay to use for next operation
                PreviousRow = new int[rowCount];

                // copy current Arr1ay into reference Arr1ay used for next operation
                Array.Copy(Arr1, 0, PreviousRow, 0, Arr1.Length);

                // count rows completed
                rowCount++;

                // increment list iterator
                i++;

                // allocate new Arr1ay to hold next row to be calculated
                Arr1 = new int[rowCount];
            }

            return result;
    }
}
