
/*
  Given an array of 2n integers, your task is to group these integers into n pairs
  of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi)
  for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).

-----------------------------------------------------------------------------------

Approach:  Sort array and get min of sorted pairs

Complexity runtime is O(n long n)+O(n), which leads to O(n log n)
*/
public class Solution {
    public int ArrayPairSum(int[] nums) {
        
        // sort array
        // complexity of this operation is O(nlog) on average
        Array.Sort(nums);
        int sum = 0;
        
        // loop through sorted pairs and 
        // pick min 
        // complexity of this operation is O(n)
        for(int i = 0; i < nums.Length-1; i=i+2)
        {
           sum += Math.Min(nums[i],nums[i+1]);
        }
        
        return sum;
    }
}
